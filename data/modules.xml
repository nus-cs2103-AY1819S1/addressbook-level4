<ModuleList>
    <modules>
        <isAvailableInSpecialTerm2>false</isAvailableInSpecialTerm2>
        <code>CS2030</code><isAvailableInSpecialTerm1>false</isAvailableInSpecialTerm1><prerequisite>CS1010 or its equivalent</prerequisite><description>This module is a follow up to CS1010. It explores two modern programming paradigms, object-oriented programming and functional programming. Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using objectoriented design principles and advanced programming constructs available in the two paradigms. Topics include objects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.</description><title>Programming Methodology II</title><preclusion>CS1020 or its equivalent</preclusion><isAvailableInSem2>false</isAvailableInSem2><isAvailableInSem1>false</isAvailableInSem1><lockedModules>BT3102</lockedModules><lockedModules>CS2102</lockedModules><lockedModules>CS2103T</lockedModules><lockedModules>CS2104</lockedModules><lockedModules>CS2105</lockedModules><lockedModules>CS2113</lockedModules><lockedModules>CS2113T</lockedModules><lockedModules>CS2309</lockedModules><lockedModules>CS3240</lockedModules><lockedModules>CS3241</lockedModules><lockedModules>CS4243</lockedModules><lockedModules>CS5239</lockedModules><lockedModules>IS2102</lockedModules><lockedModules>IS2103</lockedModules><lockedModules>IS3261</lockedModules><lockedModules>BT4222</lockedModules><lockedModules>CS2108</lockedModules><lockedModules>CS3245</lockedModules><lockedModules>CS4215</lockedModules><lockedModules>IS4241</lockedModules><lockedModules>IS4302</lockedModules><lockedModules>CS2103T</lockedModules><department>Computer Science</department><credit>4</credit>
        <parsedPrereq><or><code>CS1010</code></or></parsedPrereq>
    </modules>
    <modules>
        <isAvailableInSpecialTerm2>false</isAvailableInSpecialTerm2>
        <code>CS1231</code><isAvailableInSpecialTerm1>false</isAvailableInSpecialTerm1><prerequisite>A-level Mathematics or H2 Mathematics or MA1301 or MA1301FC or MA1301X</prerequisite><description>This module introduces mathematical tools required in the study of computer science. Topics include: (1) Logic and proof techniques: propositions, conditionals, quantifications. (2) Relations and Functions: Equivalence relations and partitions. Partially ordered sets. Well-Ordering Principle. Function equality. Boolean/identity/inverse functions. Bijection. (3) Mathematical formulation of data models (linear model, trees, graphs). (4) Counting and Combinatoric: Pigeonhole Principle. Inclusion-Exclusion Principle. Number of relations on a set, number of injections from one finite set to another, Diagonalisation proof: An infinite countable set has an uncountable power set; Algorithmic proof: An infinite set has a countably infinite subset. Subsets of countable sets are countable.</description><title>Discrete Structures</title><preclusion>MA1100</preclusion><isAvailableInSem2>false</isAvailableInSem2><isAvailableInSem1>false</isAvailableInSem1><lockedModules>CS2102</lockedModules><lockedModules>CS2309</lockedModules><lockedModules>CS3230</lockedModules><lockedModules>CS4232</lockedModules><lockedModules>CS4236</lockedModules><lockedModules>CS4261</lockedModules><lockedModules>MA2202</lockedModules><lockedModules>MA2202S</lockedModules><lockedModules>MA2214</lockedModules><lockedModules>MA3205</lockedModules><lockedModules>CS2102R</lockedModules><lockedModules>CS3234</lockedModules><lockedModules>CS3236</lockedModules><lockedModules>CS3243</lockedModules><lockedModules>CS5232</lockedModules><lockedModules>MA2219</lockedModules><department>Computer Science</department><credit>4</credit>
        <parsedPrereq></parsedPrereq>
    </modules>
    <modules>
        <isAvailableInSpecialTerm2>false</isAvailableInSpecialTerm2>
        <code>CS1010</code><isAvailableInSpecialTerm1>false</isAvailableInSpecialTerm1><prerequisite/><description>This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing. It is also the first part of a three-part series on introductory programming and problem solving by computing, which also includes CS1020 and CS2010. Topics covered include problem solving by computing, writing pseudo-codes, basic problem formulation and problem solving, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures: arrays, strings and structures, simple file processing, and basic recursion. This module is appropriate for SoC students.</description><title>Programming Methodology</title><preclusion>CG1101, CS1010E, CS1010FC, CS1010S, CS1101, CS1101C, CS1101S. Engineering and Science students who require this module for their majors/minors are not allowed to read it as ULR-Breadth.</preclusion><isAvailableInSem2>false</isAvailableInSem2><isAvailableInSem1>false</isAvailableInSem1><lockedModules>BT2101</lockedModules><lockedModules>BT2102</lockedModules><lockedModules>CG2028</lockedModules><lockedModules>CP2106</lockedModules><lockedModules>CS1020</lockedModules><lockedModules>CS2030</lockedModules><lockedModules>CS2040</lockedModules><lockedModules>CS2040C</lockedModules><lockedModules>CS2100</lockedModules><lockedModules>CS2107</lockedModules><lockedModules>DSA3102</lockedModules><lockedModules>MA3269</lockedModules><lockedModules>CG1112</lockedModules><lockedModules>ST3247</lockedModules><department>Computer Science</department><credit>4</credit>
        <parsedPrereq></parsedPrereq>
    </modules>
    <modules><isAvailableInSpecialTerm2>false</isAvailableInSpecialTerm2>
        <code>CS2040</code><isAvailableInSpecialTerm1>false</isAvailableInSpecialTerm1><prerequisite>CS1010 or its equivalent</prerequisite><description>This module introduces students to the design and implementation of fundamental data structures and algorithms. The module covers basic data structures (linked lists, stacks, queues, hash tables, binary heaps, trees, and graphs), searching and sorting algorithms, and basic analysis of algorithms.</description><title>Data Structures and Algorithms</title><preclusion>CS1020, CS1020E, CS2020, CS2010</preclusion><isAvailableInSem2>false</isAvailableInSem2><isAvailableInSem1>false</isAvailableInSem1>
        <lockedModules>BT4221</lockedModules><lockedModules>CG2271</lockedModules><lockedModules>CS2102</lockedModules><lockedModules>CS2103T</lockedModules><lockedModules>CS2105</lockedModules><lockedModules>CS2113</lockedModules><lockedModules>CS2113T</lockedModules><lockedModules>CS2220</lockedModules><lockedModules>CS2309</lockedModules><lockedModules>CS3230</lockedModules><lockedModules>CS3241</lockedModules><lockedModules>CS3244</lockedModules><lockedModules>CS4236</lockedModules><lockedModules>CS4243</lockedModules><lockedModules>CS4261</lockedModules><lockedModules>CS5240</lockedModules><lockedModules>IS3261</lockedModules><lockedModules>CS2108</lockedModules><lockedModules>CS3223</lockedModules><lockedModules>CS3243</lockedModules><lockedModules>CS3245</lockedModules><lockedModules>CS4215</lockedModules><lockedModules>CS5332</lockedModules><lockedModules>CS5346</lockedModules><department>Computer Science</department><credit>4</credit>
        <parsedPrereq><or><code>CS1010</code></or></parsedPrereq>
    </modules>
    <modules>
        <isAvailableInSpecialTerm2>false</isAvailableInSpecialTerm2>
        <code>CS2103T</code>
        <isAvailableInSpecialTerm1>false</isAvailableInSpecialTerm1>
        <prerequisite>For SoC students only. (CS1020 or CS1020E or CS2020) or (CS2030 and (CS2040 or CS2040C))</prerequisite>
        <description>This module introduces the necessary conceptual and analytical tools for systematic and rigorous development of software systems. It covers four main areas of software development, namely object-oriented system analysis, object-oriented system modelling and design, implementation, and testing, with emphasis on system modelling and design and implementation of software modules that work cooperatively to fulfill the requirements of the system. Tools and techniques for software development, such as Unified Modelling Language (UML), program specification, and testing methods, will be taught. Major software engineering issues such as modularisation criteria, program correctness, and software quality will also be covered.</description>
        <title>Software Engineering</title>
        <preclusion>CS2103, CS2113, CS2113T, IS2101 or its equivalent.</preclusion>
        <isAvailableInSem2>false</isAvailableInSem2>
        <isAvailableInSem1>false</isAvailableInSem1>
        <lockedModules>BT3102</lockedModules>
        <lockedModules>CP3880</lockedModules>
        <lockedModules>CS3203</lockedModules>
        <lockedModules>IS4234</lockedModules><lockedModules>BT4222</lockedModules><lockedModules>IS4241</lockedModules><lockedModules>IS4302</lockedModules>
        <lockedModules>CS4211</lockedModules>
        <lockedModules>CS3219</lockedModules>
        <department>Computer Science</department><credit>4</credit>
        <parsedPrereq>
            <or>
                <or><code>CS1020</code></or>
                <or><code>CS1020E</code></or>
                <or><code>CS2020</code></or>
            </or>
            <or>
                <and><code>CS2030</code></and>
                <and>
                    <or><code>CS2040</code></or>
                    <or><code>CS2040C</code></or>
                </and>
            </or>
        </parsedPrereq>
    </modules>
    <modules>
        <code>CS2101</code>
        <department>Ctr For English Language Communication</department><title>Effective Communication for Computing Professionals</title><prerequisite>Students have to complete ES1000 and/or ES1103 (if required to take the module/s) before reading this module.</prerequisite><preclusion>CS2103 Software Engineering, IS2101 Business Technical Communication or its equivalent, ES2002, ES2007D, and ES1601.</preclusion><description>This module aims to equip students with the skills needed to communicate technical information to technical and nontechnical audiences, and to create comprehensible software documentation. A student-centric approach will be adopted to encourage independent and collaborative learning while engaging students in team-based projects. Students will learn interpersonal and intercultural communication skills as well as hone their oral and written communication skills. Assessment modes include a variety of oral and written communication tasks such as reports, software guides, oral presentations, software demonstrations and project blogs.</description><credit>4</credit><isAvailableInSem1>false</isAvailableInSem1><isAvailableInSem2>false</isAvailableInSem2><isAvailableInSpecialTerm1>false</isAvailableInSpecialTerm1><isAvailableInSpecialTerm2>false</isAvailableInSpecialTerm2>
        <parsedPrereq>
            <or>
                <or><code>ES1000</code></or>
                <or><code>ES1103</code></or>
            </or>
        </parsedPrereq>
        <lockedModules>CP3880</lockedModules><lockedModules>CS3203</lockedModules><lockedModules>IS3103</lockedModules><lockedModules>IS4010</lockedModules>
    </modules>
    <modules>
        <code>CS2105</code><department>Computer Science</department><title>Introduction to Computer Networks</title><prerequisite>CS1020 or CS1020E or CS2020 or CS2030 or CS2040 or CS2040C</prerequisite><preclusion>IT2001, EE3204/E, EE4210. CEG, CPE and EEE students are not allowed to take this module.</preclusion><description>This module aims to provide a broad introduction to computer networks and network application programming. It covers the main concepts, the fundamental principles, and the high-level workings of important protocols in each of the Internet protocol layer. Topics include the Web and Web applications, DNS services, socket programming, reliable protocols, transport and network layer protocols, secure communication, LAN, and data communication. Practical assignments and handson exercises expose students to network application programming and various networking tools and utilities.</description><credit>4</credit><isAvailableInSem1>false</isAvailableInSem1><isAvailableInSem2>false</isAvailableInSem2><isAvailableInSpecialTerm1>false</isAvailableInSpecialTerm1><isAvailableInSpecialTerm2>false</isAvailableInSpecialTerm2>
        <parsedPrereq>
            <or>
                <or><code>CS1020</code></or>
                <or><code>CS1020E</code></or>
                <or><code>CS2020</code></or>
                <or><code>CS2030</code></or>
                <or><code>CS2040</code></or>
                <or><code>CS2040C</code></or>
            </or>
        </parsedPrereq>
        <lockedModules>CP3106</lockedModules><lockedModules>CS3103</lockedModules><lockedModules>CS3235</lockedModules><lockedModules>CS4226</lockedModules><lockedModules>CS4222</lockedModules><lockedModules>CS5422</lockedModules><lockedModules>CS6211</lockedModules>
    </modules>
    <modules>
        <code>CS2106</code><department>Computer Science</department><title>Introduction to Operating Systems</title><prerequisite>CS2100 or EE2007 or EE2024</prerequisite><preclusion>CG2271 or EE4214. CEG students are not allowed to take this module.</preclusion><description>This module introduces the basic concepts in operating systems and links it with contemporary operating systems (eg. Unix/Linux and Windows). It focuses on OS structuring and architecture, processes, memory management, concurrency and file systems. Topics include kernel architecture, system calls, interrupts, models of processes, process abstraction and services, scheduling, review of physical memory and memory management hardware, kernel memory management, virtual memory and paging, caches, working set, deadlock, mutual exclusion, synchronisation mechanisms, data and metadata in file systems, directories and structure, file system abstraction and operations, OS protection mechanisms, and user authentication.</description><credit>4</credit><isAvailableInSem1>false</isAvailableInSem1><isAvailableInSem2>false</isAvailableInSem2><isAvailableInSpecialTerm1>false</isAvailableInSpecialTerm1><isAvailableInSpecialTerm2>false</isAvailableInSpecialTerm2>
        <parsedPrereq>
            <or>
                <or><code>CS2100</code></or>
                <or><code>EE2007</code></or>
                <or><code>EE2024</code></or>
            </or>
        </parsedPrereq><lockedModules>CS3235</lockedModules><lockedModules>CS4223</lockedModules><lockedModules>CS3211</lockedModules><lockedModules>CS5250</lockedModules><lockedModules>CS5272</lockedModules><lockedModules>CS6211</lockedModules>
    </modules>
    <modules>
        <code>CS2100</code><department>Computer Science</department><title>Computer Organisation</title><prerequisite>CS1010 or its equivalent</prerequisite><preclusion>CS1104 or Students from Department of ECE</preclusion><description>The objective of this module is to familiarise students with the fundamentals of computing devices. Through this module students will understand the basics of data representation, and how the various parts of a computer work, separately and with each other. This allows students to understand the issues in computing devices, and how these issues affect the implementation of solutions. Topics covered include data representation systems, combinational and sequential circuit design techniques, assembly language, processor execution cycles, pipelining, memory hierarchy and input/output systems.</description><credit>4</credit><isAvailableInSem1>false</isAvailableInSem1><isAvailableInSem2>false</isAvailableInSem2><isAvailableInSpecialTerm1>false</isAvailableInSpecialTerm1><isAvailableInSpecialTerm2>false</isAvailableInSpecialTerm2>
        <parsedPrereq>
            <and>
                <code>CS1010</code>
            </and>
        </parsedPrereq>
        <lockedModules>CS2106</lockedModules><lockedModules>CS3210</lockedModules>
    </modules>
    <modules>
        <code>IS1103</code><department>Information Systems &amp; Analytics</department><title>IS Innovations in Organisations and Society</title><prerequisite></prerequisite><preclusion></preclusion><description>The module gives a wide yet insightful understanding of the impact of IT on organisation and society. Issues such as Internet and “new economy” geographies; impacts of IT and creation of IT innovation for public health, urban planning, and regional equity, food systems, climate change can be discussed. Other issues for consideration could be dark web and IT security advancement, open vs. closed innovation creation. Misuse of IT that put ethics and professionalism into question will be also discussed.</description><credit>4</credit><isAvailableInSem1>false</isAvailableInSem1><isAvailableInSem2>false</isAvailableInSem2><isAvailableInSpecialTerm1>false</isAvailableInSpecialTerm1><isAvailableInSpecialTerm2>false</isAvailableInSpecialTerm2>
        <parsedPrereq/>
        <lockedModules>IS3103</lockedModules><lockedModules>IS3240</lockedModules><lockedModules>IS4100</lockedModules><lockedModules>IS3221</lockedModules><lockedModules>IS3251</lockedModules><lockedModules>IS4250</lockedModules>
    </modules>
    <modules>
        <code>CS3230</code><department>Computer Science</department><title>Design and Analysis of Algorithms</title><prerequisite>(CS2010 or CS2020 or CS2040 or CS2040C) and (CS1231 or MA1100)</prerequisite><preclusion>EEE and CPE students can only take this module as a technical elective to satisfy the program requirements or UEM but not CFM/ULR-Breadth.</preclusion><description>This module introduces different techniques of designing and analysing algorithms. Students will learn about the framework for algorithm analysis, for example, lower bound arguments, average case analysis, and the theory of NP-completeness. In addition, students are exposed to various algorithm design paradigms. The module serves two purposes: to improve the students' ability to design algorithms in different areas, and to prepare students for the study of more advanced algorithms. The module covers lower and upper bounds, recurrences, basic algorithm paradigms (such as prune-and-search, dynamic programming, branch-and-bound, graph traversal, and randomised approaches), amortized analysis, NP-completeness, and some selected advanced topics.</description><credit>4</credit><isAvailableInSem1>false</isAvailableInSem1><isAvailableInSem2>false</isAvailableInSem2><isAvailableInSpecialTerm1>false</isAvailableInSpecialTerm1><isAvailableInSpecialTerm2>false</isAvailableInSpecialTerm2>
        <parsedPrereq>
            <and>
                <and>
                    <or><code>CS2010</code></or><or><code>CS2020</code></or><or><code>CS2040</code></or><or><code>CS2040C</code></or>
                </and>
                <and>
                    <or><code>CS1231</code></or><or><code>MA1100</code></or>
                </and>
            </and>
        </parsedPrereq>
        <lockedModules>CS4234</lockedModules><lockedModules>CS5234</lockedModules><lockedModules>CS6210</lockedModules><lockedModules>CS6244</lockedModules><lockedModules>CS6283</lockedModules><lockedModules>CS6285</lockedModules><lockedModules>CS5238</lockedModules><lockedModules>CS4231</lockedModules><lockedModules>CS4257</lockedModules><lockedModules>CS5330</lockedModules><lockedModules>CS6215</lockedModules>
    </modules>
    <modules>
        <code>ES2660</code><department>Ctr For English Language Communication</department><title>Communicating in the Information Age</title><prerequisite>1. Students who are required to take ES1000 Foundation Academic English and/or ES1103 English for Academic Purposes, must pass those modules before they are allowed to read this module.
        2. Only SoC students matriculated in AY2016/2017 and after, are allowed to take ES2660.</prerequisite><preclusion>GET1006 and GEK1901</preclusion><description>In a context of prolific production and convenient access to content and innovation in the Information Age, how should one critically process and clearly communicate ideas to various audiences? In this module, students will learn to question and articulate their analysis of assumptions and assertions on issues facing the Information Age through processes such as identifying bias and substantiating arguments. The Ennis’ (1986, 2001) taxonomy of critical thinking dispositions will be employed to develop students’ analytical thinking skills and their ability to articulate cogent responses to arguments or to defend their own positions in both written and oral form.</description><credit>4</credit><isAvailableInSem1>false</isAvailableInSem1><isAvailableInSem2>false</isAvailableInSem2><isAvailableInSpecialTerm1>false</isAvailableInSpecialTerm1><isAvailableInSpecialTerm2>false</isAvailableInSpecialTerm2>
    </modules>
    <modules>
        <code>GER1000</code><department>Office Of The Provost</department><title>Quantitative Reasoning</title><prerequisite></prerequisite><preclusion>GER1000E, GER1000K, GER1000W, GER1000R, GER1000S, GER1000T, GER1000P, GER1000B</preclusion><description>This module aims to equip undergraduates with basic reasoning skills on using data to address real world issues. What are some potential complications to keep in mind as we plan what data to collect and how to use them to address our particular issue? When two things are related (e.g. smoking and cancer), how can we tell whether the relationship is causal (e.g. smoking causes cancer)? How can quantitative reasoning help us deal with uncertainty or elucidate complex relationships? These and other questions will be discussed using real world examples.</description><credit>4</credit><isAvailableInSem1>false</isAvailableInSem1><isAvailableInSem2>false</isAvailableInSem2><isAvailableInSpecialTerm1>false</isAvailableInSpecialTerm1><isAvailableInSpecialTerm2>false</isAvailableInSpecialTerm2>
        <parsedPrereq/>
        <lockedModules>PR3144</lockedModules>
    </modules>
    <modules>
        <code>MA1101R</code><department>Mathematics</department><title>Linear Algebra I</title><prerequisite>GCE ‘A’ Level or H2 Mathematics or H2 Further Mathematics or MA1301 or MA1301FC or MA1301X</prerequisite><preclusion>EG1401, EG1402, MA1101, MA1311, MA1506, MA1508, FOE students</preclusion><description>This module is a first course in linear algebra. Fundamental concepts of linear algebra will be introduced and investigated in the context of the Euclidean spaces R^n. Proofs of results will be presented in the concrete setting. Students are expected to acquire computational facilities and geometric intuition with regard to vectors and matrices. Some applications will be presented. Major topics: Systems of linear equations, matrices, determinants, Euclidean spaces, linear combinations and linear span, subspaces, linear independence, bases and dimension, rank of a matrix, inner products, eigenvalues and eigenvectors, diagonalization, linear transformations between Euclidean spaces, applications.</description><credit>4</credit><isAvailableInSem1>false</isAvailableInSem1><isAvailableInSem2>false</isAvailableInSem2><isAvailableInSpecialTerm1>false</isAvailableInSpecialTerm1><isAvailableInSpecialTerm2>false</isAvailableInSpecialTerm2>
        <parsedPrereq/>
        <lockedModules>BT4240</lockedModules><lockedModules>CS3244</lockedModules><lockedModules>CS4234</lockedModules><lockedModules>CS4243</lockedModules><lockedModules>CS4261</lockedModules><lockedModules>CS5240</lockedModules><lockedModules>CS6244</lockedModules><lockedModules>DSA2101</lockedModules><lockedModules>DSA3102</lockedModules><lockedModules>DSC3214</lockedModules><lockedModules>EC3314</lockedModules><lockedModules>MA2101</lockedModules><lockedModules>MA2213</lockedModules><lockedModules>MA2214</lockedModules><lockedModules>MA2288</lockedModules><lockedModules>MA2289</lockedModules><lockedModules>MA3220</lockedModules><lockedModules>MA3238</lockedModules><lockedModules>PC2131</lockedModules><lockedModules>PC2132</lockedModules><lockedModules>PC2134</lockedModules><lockedModules>ST3236</lockedModules><lockedModules>CS3242</lockedModules><lockedModules>CS4347</lockedModules><lockedModules>CS5246</lockedModules><lockedModules>CS5332</lockedModules><lockedModules>DSA2102</lockedModules><lockedModules>MA2101S</lockedModules><lockedModules>MA2219</lockedModules><lockedModules>MA3252</lockedModules><lockedModules>PC2130</lockedModules>
    </modules>
    <modules>
        <code>ES1103</code><department>Ctr For English Language Communication</department><title>English for Academic Purposes</title><prerequisite>1. Placement through the Qualifying English Test or a pass in ES1000. 2. Only students who matriculated in AY2016/17 and onwards can take ES1103</prerequisite><preclusion>ES1102</preclusion><description>ES1103 serves as a bridging course for students who have taken the university’s Qualifying English Test and are deemed to require additional language support for the academic context. It aims to equip students with the knowledge of the academic genre and the ability to apply such knowledge in academic communication. The module adopts a reading-into-writing approach using themed readings as springboard texts for students’ writing and provides opportunities for analysing and internalising ways of organising academic texts. Students will acquire essential academic skills required to cope with the rigour of academic writing at a tertiary level.</description><credit>4</credit><isAvailableInSem1>false</isAvailableInSem1><isAvailableInSem2>false</isAvailableInSem2><isAvailableInSpecialTerm1>false</isAvailableInSpecialTerm1><isAvailableInSpecialTerm2>false</isAvailableInSpecialTerm2>
        <parsedPrereq/>
        <lockedModules>CS2101</lockedModules><lockedModules>ENV1202</lockedModules><lockedModules>ES1601</lockedModules><lockedModules>ES2007D</lockedModules><lockedModules>ES2331</lockedModules><lockedModules>FAS1101</lockedModules><lockedModules>FAS1102</lockedModules><lockedModules>IS2101</lockedModules><lockedModules>PR4196</lockedModules>
    </modules>
    <modules>
        <code>MA1521</code><department>Mathematics</department><title>Calculus for Computing</title><prerequisite>GCE ‘A’ level Mathematics or H2 Mathematics or H2 Further Mathematics or MA1301 or MA1301FC or MA1301X</prerequisite><preclusion>MA1102R, MA1312, MA1505, MA1507, MA2501, MA1511, FoE students</preclusion><description>This module provides a basic foundation for calculus and its related subjects required by computing students. The objective is to train the students to be able to handle calculus techniques arising in their courses of specialization. In addition to the standard calculus material, the course also covers simple mathematical modeling techniques and numerical methods in connection with ordinary differential equations. Major topics: Preliminaries on sets and number systems. Calculus of functions of one variable and applications. Sequences, series and power series. Functions of several variables. Extrema. First and second order differential equations. Basic numerical methods for ordinary differential equations.</description><credit>4</credit><isAvailableInSem1>false</isAvailableInSem1><isAvailableInSem2>false</isAvailableInSem2><isAvailableInSpecialTerm1>false</isAvailableInSpecialTerm1><isAvailableInSpecialTerm2>false</isAvailableInSpecialTerm2>
        <parsedPrereq/>
        <lockedModules>BT2101</lockedModules><lockedModules>BT4240</lockedModules><lockedModules>CS3244</lockedModules><lockedModules>CS4243</lockedModules><lockedModules>CS5240</lockedModules><lockedModules>DSC3214</lockedModules><lockedModules>IS4242</lockedModules><lockedModules>MA2104</lockedModules><lockedModules>MA2108</lockedModules><lockedModules>MA2213</lockedModules><lockedModules>MA2216</lockedModules><lockedModules>MA2311</lockedModules><lockedModules>MA3220</lockedModules><lockedModules>ST2131</lockedModules><lockedModules>ST2334</lockedModules><lockedModules>CS3242</lockedModules><lockedModules>CS4347</lockedModules><lockedModules>CS5332</lockedModules><lockedModules>MA2108S</lockedModules>
    </modules>
    <modules>
        <code>GEQ1000</code><department>Office Of The Provost</department><title>Asking Questions</title><prerequisite></prerequisite><preclusion></preclusion><description>There are many ways to ask questions, and many kinds of questions that different disciplines investigate. For a start, this module introduces six dominant modes of questioning from the perspective of computational thinking, design thinking, engineering, philosophy, science, and social sciences. These six perspectives serve as a starting point to introduce all undergraduate students to different modes of questioning across these disciplines, and provide an initial exposure to how scholars from these disciplines pursue specific lines of questioning of everyday issues. We emphasize that while there is only limited time and space within one module to devote to specific disciplinary lines of investigations, we encourage all students to actively think about other lines of questioning, other questions that need to be asked, particularly in disciplines not represented in this introductory platform as we move through this journey together. We expect that in future subsequent offerings, other disciplinary modes of investigations may also be introduced.</description><credit>4</credit><isAvailableInSem1>false</isAvailableInSem1><isAvailableInSem2>false</isAvailableInSem2><isAvailableInSpecialTerm1>false</isAvailableInSpecialTerm1><isAvailableInSpecialTerm2>false</isAvailableInSpecialTerm2>
        <parsedPrereq/>
    </modules>
    <modules>
        <code>CP2201</code><department>Dean's Office (School Of Computing)</department><title>Journey of the Innovator</title><prerequisite></prerequisite><preclusion></preclusion><description>Innovators practice the art of persuading people to accept changes in how they live—in work, leisure and social interaction. This module’s object is to introduce students to digital innovation, and to encourage them to embark on a personal journey of creativity and challenge. Inspirational innovators will be invited to present topics related to digital innovation, such as successful innovative projects of start-up teams and advanced development teams, innovative approaches such as Design Thinking, and opportunities for innovation, the vibrant intersection of energising technology trends and new markets. This module will be graded as “Completed Satisfactory” or “Completed Unsatisfactory” (CS/CU).</description><credit>2</credit><isAvailableInSem1>false</isAvailableInSem1><isAvailableInSem2>false</isAvailableInSem2><isAvailableInSpecialTerm1>false</isAvailableInSpecialTerm1><isAvailableInSpecialTerm2>false</isAvailableInSpecialTerm2>
        <parsedPrereq/>
    </modules>
    <modules>
        <code>CS3219</code><department>Computer Science</department><title>Software Engineering Principles and Patterns</title><prerequisite>CS2103 or its equivalent</prerequisite><preclusion>CS3213 Software Systems Design</preclusion><description>This module provides an in-depth, hands-on experience in key aspects of software engineering that accompany the development of software. Based on proven principles and best practices, this module focuses on software architectural design from the perspective of the software process. It covers techniques for requirement elicitation and specification that provide sound base for architectural design. The module covers design decision exploration as well as patterns that explicate principles and best practices in replicable form.</description><credit>4</credit><isAvailableInSem1>false</isAvailableInSem1><isAvailableInSem2>false</isAvailableInSem2><isAvailableInSpecialTerm1>false</isAvailableInSpecialTerm1><isAvailableInSpecialTerm2>false</isAvailableInSpecialTerm2>
        <parsedPrereq>
            <and>
                <or><code>CS2103</code></or>
                <or><code>CS2103T</code></or>
            </and>
        </parsedPrereq>
        <lockedModules>CS4218</lockedModules>
    </modules>
    <modules>
        <code>CS4211</code><department>Computer Science</department><title>Formal Methods for Software Engineering</title><prerequisite>CS2103 or its equivalent</prerequisite><preclusion></preclusion><description>Before software can be designed, its requirements must be well understood. This in turns requires a thorough understanding of the application domain. Based on the requirements, software engineers construct design models, and then use these design models as guide to construct software implementations. This module will cover formal specification and verification techniques for accurately capturing and reasoning about requirements, model and code. The topics covered include modeling notations, temporal logics, model checking, software model checking, theorem proving, and symbolic execution based analysis. Most importantly, the module will attempt to inculcate an appreciation and understanding of formal thinking in software design and construction.</description><credit>4</credit><isAvailableInSem1>false</isAvailableInSem1><isAvailableInSem2>false</isAvailableInSem2><isAvailableInSpecialTerm1>false</isAvailableInSpecialTerm1><isAvailableInSpecialTerm2>false</isAvailableInSpecialTerm2>
        <parsedPrereq>
            <and>
                <or><code>CS2103</code></or>
                <or><code>CS2103T</code></or>
            </and>
        </parsedPrereq>
    </modules>
    <modules>
        <code>CS4218</code><department>Computer Science</department><title>Software Testing</title><prerequisite>CS3219 Software Engineering Principles and Patterns.</prerequisite><preclusion>Nil</preclusion><description>This module covers the concepts and practice of software testing including unit testing, integration testing, and regression testing. Various testing coverage criteria will be discussed. Debugging methods for finding the root-cause of errors in failing test cases will also be investigated. The use of testing and analysis for performance prediction, performance clustering and performance debugging will be studied. Students will acquire crucial skills on testing and debugging through hands-on assignments.</description><credit>4</credit><isAvailableInSem1>false</isAvailableInSem1><isAvailableInSem2>false</isAvailableInSem2><isAvailableInSpecialTerm1>false</isAvailableInSpecialTerm1><isAvailableInSpecialTerm2>false</isAvailableInSpecialTerm2>
        <parsedPrereq>
            <and><code>CS3219</code></and>
        </parsedPrereq>
    </modules>



</ModuleList>

