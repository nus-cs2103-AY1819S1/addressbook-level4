package seedu.address.ui.testutil;

import static org.junit.Assert.assertEquals;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import guitests.guihandles.PersonCardHandle;
import guitests.guihandles.PersonListPanelHandle;
import guitests.guihandles.ResultDisplayHandle;
import seedu.address.model.person.Address;
import seedu.address.model.person.Email;
import seedu.address.model.person.Person;
import seedu.address.model.person.Phone;
import seedu.address.ui.PersonCard;

/**
 * A set of assertion methods useful for writing GUI tests.
 */
public class GuiTestAssert {
    private static final String LABEL_DEFAULT_STYLE = "label";
    /**
     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}.
     */
    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {
        assertEquals(expectedCard.getId(), actualCard.getId());
        assertEquals(expectedCard.getAddress(), actualCard.getAddress());
        assertEquals(expectedCard.getEmail(), actualCard.getEmail());
        assertEquals(expectedCard.getName(), actualCard.getName());
        assertEquals(expectedCard.getPhone(), actualCard.getPhone());
        assertEquals(expectedCard.getTags(), actualCard.getTags());

        expectedCard.getTags().forEach(tag ->
                assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));
    }

    /**
     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}.
     */
    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {
        assertEquals(expectedPerson.getName().fullName, actualCard.getName());
        assertPhoneFieldAccurate(expectedPerson.getPhone(), actualCard.getPhone());
        assertEmailFieldAccurate(expectedPerson.getEmail(), actualCard.getEmail());
        assertAddressFieldAccurate(expectedPerson.getAddress(), actualCard.getAddress());
        assertTagsEqual(expectedPerson, actualCard);
    }

    //@@author zioul123
    /**
     * Asserts that {@code actualAddressField} displays the correct address of {@code address} if it exists,
     * and the correct message otherwise.
     * @param address The Optional address that belongs to the person.
     * @param actualAddressField The string displayed in the Card's address field.
     */
    private static void assertAddressFieldAccurate(Optional<Address> address, String actualAddressField) {
        address.ifPresentOrElse(a -> assertEquals(a.value, actualAddressField), () -> {
            assertEquals(actualAddressField, PersonCard.NO_ADDRESS);
        });
    }

    /**
     * Asserts that {@code actualPhoneField} displays the correct phone number of {@code phone} if it exists,
     * and the correct message otherwise.
     * @param phone The Optional phone that belongs to the person.
     * @param actualPhoneField The string displayed in the Card's phone field.
     */
    private static void assertPhoneFieldAccurate(Optional<Phone> phone, String actualPhoneField) {
        phone.ifPresentOrElse(p -> assertEquals(p.value, actualPhoneField), () -> {
            assertEquals(actualPhoneField, PersonCard.NO_PHONE);
        });
    }

    /**
     * Asserts that {@code actualEmailField} displays the correct email address of {@code email} if it exists,
     * and the correct message otherwise.
     * @param email The Optional email that belongs to the person.
     * @param actualEmailField The string displayed in the Card's email field.
     */
    private static void assertEmailFieldAccurate(Optional<Email> email, String actualEmailField) {
        email.ifPresentOrElse(e -> assertEquals(e.value, actualEmailField), () -> {
            assertEquals(actualEmailField, PersonCard.NO_EMAIL);
        });
    }
    //@@author

    /**
     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and
     * in the correct order.
     */
    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {
        for (int i = 0; i < persons.length; i++) {
            personListPanelHandle.navigateToCard(i);
            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));
        }
    }

    /**
     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and
     * in the correct order.
     */
    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List<Person> persons) {
        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));
    }

    /**
     * Returns the color style for {@code tagName}'s label. The tag's color is determined by looking up the color
     * in {@code PersonCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag's content.
     *
     * @see PersonCard#getTagColorStyleFor(String)
     */
    private static String getTagColorStyleFor(String tagName) {
        switch (tagName) {
        case "classmates":
        case "owesMoney":
        case "Important":
        case "Rich":
            return "teal";
        case "colleagues":
        case "neighbours":
            return "yellow";
        case "family":
        case "friend":
            return "orange";
        case "friends":
            return "brown";
        case "husband":
        case "OCBC":
            return "grey";
        case "Korean":
        case "POSB":
            return "black";
        case "Japanese":
            return "blue";
        case "Chinese":
        case "Client":
        case "Singaporean":
        case "DBS":
            return "pink";
        case "Colleague":
            return "red";
        default:
            throw new AssertionError(tagName + " does not have a color assigned.");
        }
    }
    /**
     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct
     * color.
     */
    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {
        List<String> expectedTags = expectedPerson.getTags().stream()
                .map(tag -> tag.tagName).collect(Collectors.toList());
        assertEquals(expectedTags, actualCard.getTags());
        expectedTags.forEach(tag ->
                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),
                        actualCard.getTagStyleClasses(tag)));
    }

    /**
     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}.
     */
    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {
        int numberOfPeople = personListPanelHandle.getListSize();
        assertEquals(size, numberOfPeople);
    }

    /**
     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}.
     */
    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {
        assertEquals(expected, resultDisplayHandle.getText());
    }
}
